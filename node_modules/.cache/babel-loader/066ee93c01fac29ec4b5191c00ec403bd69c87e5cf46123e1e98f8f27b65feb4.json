{"ast":null,"code":"/**\n * VTON (Virtual Try-On) Service\n * This service handles the processing of person and garment images to create a virtual try-on effect.\n */\n\n/**\n * Helper function to convert a File object to base64 string\n * @param {File} file - The file to convert\n * @returns {Promise<string>} - A promise that resolves to the base64 string\n */\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    // Create a FileReader to read the file\n    const reader = new FileReader();\n    // Read the file as a data URL (which includes the base64 encoding)\n    reader.readAsDataURL(file);\n    // When the file is loaded, resolve the promise with the result\n    reader.onload = () => resolve(reader.result);\n    // If there's an error, reject the promise\n    reader.onerror = error => reject(error);\n  });\n};\n\n/**\n * Helper function to convert a File object to a Blob\n * @param {File} file - The file to convert\n * @returns {Promise<Blob>} - A promise that resolves to the Blob\n */\nconst fileToBlob = async file => {\n  return new Promise((resolve, reject) => {\n    // Create a FileReader to read the file\n    const reader = new FileReader();\n    // When the file is loaded, create a Blob from the array buffer\n    reader.onload = () => {\n      const arrayBuffer = reader.result;\n      const blob = new Blob([arrayBuffer], {\n        type: file.type\n      });\n      resolve(blob);\n    };\n    // If there's an error, reject the promise\n    reader.onerror = reject;\n    // Read the file as an array buffer\n    reader.readAsArrayBuffer(file);\n  });\n};\n\n/**\n * Helper function to handle file for Gradio client\n * This is a simple pass-through function that returns the file as is\n * @param {File|string} file - The file to handle\n * @returns {File|string} - The same file\n */\nconst handle_file = file => {\n  return file;\n};\n\n// Hugging Face API token for authentication\nconst HF_TOKEN = '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';\n\n/**\n * Process VTON request with person and garment images\n * This is the main function that handles the virtual try-on process\n * @param {Object} request - The VTON request containing person and garment images\n * @param {File} request.personImage - The person image file\n * @param {File} request.garmentImage - The garment image file\n * @returns {Promise<Object>} - The VTON response with the generated image\n */\nexport const processVTON = async (personImage, garmentImage) => {\n  try {\n    console.log('Starting VTON processing...');\n    console.log('Person image:', personImage === null || personImage === void 0 ? void 0 : personImage.name);\n    console.log('Garment image:', garmentImage === null || garmentImage === void 0 ? void 0 : garmentImage.name);\n\n    // Validate input\n    if (!personImage || !garmentImage) {\n      throw new Error('Both person and garment images are required');\n    }\n\n    // Create FormData for the backend API\n    const formData = new FormData();\n    formData.append('person_image', personImage);\n    formData.append('garment_image', garmentImage);\n    console.log('Sending request to backend API...');\n\n    // Make API call to our backend with timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n    try {\n      const apiUrl = new URL('/api/vton/process', 'http://localhost:5000');\n      const response = await fetch(apiUrl.toString(), {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal,\n        headers: {\n          'Accept': 'application/json'\n        },\n        mode: 'cors',\n        credentials: 'same-origin'\n      });\n      clearTimeout(timeoutId);\n\n      // Log the response status and headers for debugging\n      console.log('API Response Status:', response.status);\n      console.log('API Response Headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`API request failed with status ${response.status}: ${errorText}`);\n      }\n      const result = await response.json();\n      console.log('API response received:', result);\n      if (!result || !result.success) {\n        console.error('Invalid API response:', result);\n        throw new Error('Failed to process images with VTON service');\n      }\n      return {\n        success: true,\n        result_image: result.result_image\n      };\n    } catch (fetchError) {\n      if (fetchError.name === 'AbortError') {\n        throw new Error('Request timed out after 30 seconds');\n      }\n      throw fetchError;\n    }\n  } catch (error) {\n    console.error('Error in processVTON:', error);\n    return {\n      success: false,\n      error: error.message,\n      details: error.stack\n    };\n  }\n};\n\n/**\n * Process VTON request with person and garment images (compatibility function)\n * This function is provided for backward compatibility\n * @param {File} personImage - The person image file\n * @param {File} garmentImage - The garment image file\n * @returns {Promise<Object>} - The VTON response with the generated image\n */\nexport const processEnhancedVTON = async (personImage, garmentImage) => {\n  // Call the main processVTON function with the correct parameter format\n  return processVTON(personImage, garmentImage);\n};\n\n/**\n * Get the result image URL\n * This function constructs the URL for the result image based on the filename\n * @param {string} filename - The filename of the result image\n * @returns {string} - The URL of the result image\n */\nexport const getResultImage = filename => {\n  return `/assets1/${filename}`;\n};","map":{"version":3,"names":["fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","fileToBlob","arrayBuffer","blob","Blob","type","readAsArrayBuffer","handle_file","HF_TOKEN","processVTON","personImage","garmentImage","console","log","name","Error","formData","FormData","append","controller","AbortController","timeoutId","setTimeout","abort","apiUrl","URL","response","fetch","toString","method","body","signal","headers","mode","credentials","clearTimeout","status","Object","fromEntries","entries","ok","errorText","text","json","success","result_image","fetchError","message","details","stack","processEnhancedVTON","getResultImage","filename"],"sources":["C:/Users/amits/Downloads/cursor1/src/services/vtonService.js"],"sourcesContent":["/**\n * VTON (Virtual Try-On) Service\n * This service handles the processing of person and garment images to create a virtual try-on effect.\n */\n\n/**\n * Helper function to convert a File object to base64 string\n * @param {File} file - The file to convert\n * @returns {Promise<string>} - A promise that resolves to the base64 string\n */\nconst fileToBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    // Create a FileReader to read the file\n    const reader = new FileReader();\n    // Read the file as a data URL (which includes the base64 encoding)\n    reader.readAsDataURL(file);\n    // When the file is loaded, resolve the promise with the result\n    reader.onload = () => resolve(reader.result);\n    // If there's an error, reject the promise\n    reader.onerror = (error) => reject(error);\n  });\n};\n\n/**\n * Helper function to convert a File object to a Blob\n * @param {File} file - The file to convert\n * @returns {Promise<Blob>} - A promise that resolves to the Blob\n */\nconst fileToBlob = async (file) => {\n  return new Promise((resolve, reject) => {\n    // Create a FileReader to read the file\n    const reader = new FileReader();\n    // When the file is loaded, create a Blob from the array buffer\n    reader.onload = () => {\n      const arrayBuffer = reader.result;\n      const blob = new Blob([arrayBuffer], { type: file.type });\n      resolve(blob);\n    };\n    // If there's an error, reject the promise\n    reader.onerror = reject;\n    // Read the file as an array buffer\n    reader.readAsArrayBuffer(file);\n  });\n};\n\n/**\n * Helper function to handle file for Gradio client\n * This is a simple pass-through function that returns the file as is\n * @param {File|string} file - The file to handle\n * @returns {File|string} - The same file\n */\nconst handle_file = (file) => {\n  return file;\n};\n\n// Hugging Face API token for authentication\nconst HF_TOKEN = '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';\n\n/**\n * Process VTON request with person and garment images\n * This is the main function that handles the virtual try-on process\n * @param {Object} request - The VTON request containing person and garment images\n * @param {File} request.personImage - The person image file\n * @param {File} request.garmentImage - The garment image file\n * @returns {Promise<Object>} - The VTON response with the generated image\n */\nexport const processVTON = async (personImage, garmentImage) => {\n  try {\n    console.log('Starting VTON processing...');\n    console.log('Person image:', personImage?.name);\n    console.log('Garment image:', garmentImage?.name);\n    \n    // Validate input\n    if (!personImage || !garmentImage) {\n      throw new Error('Both person and garment images are required');\n    }\n    \n    // Create FormData for the backend API\n    const formData = new FormData();\n    formData.append('person_image', personImage);\n    formData.append('garment_image', garmentImage);\n    \n    console.log('Sending request to backend API...');\n    \n    // Make API call to our backend with timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n    \n    try {\n      const apiUrl = new URL('/api/vton/process', 'http://localhost:5000');\n      const response = await fetch(apiUrl.toString(), {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal,\n        headers: {\n          'Accept': 'application/json'\n        },\n        mode: 'cors',\n        credentials: 'same-origin'\n      });\n      \n      clearTimeout(timeoutId);\n      \n      // Log the response status and headers for debugging\n      console.log('API Response Status:', response.status);\n      console.log('API Response Headers:', Object.fromEntries(response.headers.entries()));\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`API request failed with status ${response.status}: ${errorText}`);\n      }\n      \n      const result = await response.json();\n      console.log('API response received:', result);\n      \n      if (!result || !result.success) {\n        console.error('Invalid API response:', result);\n        throw new Error('Failed to process images with VTON service');\n      }\n      \n      return {\n        success: true,\n        result_image: result.result_image\n      };\n    } catch (fetchError) {\n      if (fetchError.name === 'AbortError') {\n        throw new Error('Request timed out after 30 seconds');\n      }\n      throw fetchError;\n    }\n  } catch (error) {\n    console.error('Error in processVTON:', error);\n    return {\n      success: false,\n      error: error.message,\n      details: error.stack\n    };\n  }\n};\n\n/**\n * Process VTON request with person and garment images (compatibility function)\n * This function is provided for backward compatibility\n * @param {File} personImage - The person image file\n * @param {File} garmentImage - The garment image file\n * @returns {Promise<Object>} - The VTON response with the generated image\n */\nexport const processEnhancedVTON = async (personImage, garmentImage) => {\n  // Call the main processVTON function with the correct parameter format\n  return processVTON(personImage, garmentImage);\n};\n\n/**\n * Get the result image URL\n * This function constructs the URL for the result image based on the filename\n * @param {string} filename - The filename of the result image\n * @returns {string} - The URL of the result image\n */\nexport const getResultImage = (filename) => {\n  return `/assets1/${filename}`;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}