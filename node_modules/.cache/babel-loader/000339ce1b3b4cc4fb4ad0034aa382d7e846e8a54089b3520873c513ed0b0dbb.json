{"ast":null,"code":"/**\r\n * VTON (Virtual Try-On) Service\r\n * This service handles the processing of person and garment images to create a virtual try-on effect.\r\n */\n\n// Helper function to convert File to base64\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n};\n\n/**\r\n * Process VTON request with person and garment images\r\n * @param {Object} request - The VTON request containing person and garment images\r\n * @returns {Promise<Object>} - The VTON response with the generated image\r\n */\nexport const processVTON = async request => {\n  try {\n    console.log('Processing VTON request...');\n\n    // Convert images to base64\n    const personImageBase64 = await fileToBase64(request.personImage);\n    const garmentImageBase64 = await fileToBase64(request.garmentImage);\n\n    // In a real implementation, we would send these to the Hugging Face API\n    // For now, we'll simulate the API call with a delay\n    console.log('Simulating API call to Hugging Face...');\n\n    // Simulate API processing delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // For testing purposes, we'll return a predefined image\n    // In a real implementation, this would be the image returned by the API\n    const resultImage = '/assets1/man.png';\n    console.log('VTON processing completed successfully');\n    return {\n      success: true,\n      result_image: resultImage,\n      message: 'VTON processing completed successfully'\n    };\n  } catch (error) {\n    console.error('Error in VTON processing:', error);\n    return {\n      success: false,\n      error: error.message || 'Unknown error occurred during VTON processing'\n    };\n  }\n};\n\n/**\r\n * Get the result image URL\r\n * @param {string} filename - The filename of the result image\r\n * @returns {string} - The URL of the result image\r\n */\nexport const getResultImage = filename => {\n  return `/assets1/${filename}`;\n};","map":{"version":3,"names":["fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","processVTON","request","console","log","personImageBase64","personImage","garmentImageBase64","garmentImage","setTimeout","resultImage","success","result_image","message","getResultImage","filename"],"sources":["C:/Users/amits/Downloads/cursor1/src/services/vtonService.js"],"sourcesContent":["/**\r\n * VTON (Virtual Try-On) Service\r\n * This service handles the processing of person and garment images to create a virtual try-on effect.\r\n */\r\n\r\n// Helper function to convert File to base64\r\nconst fileToBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n};\r\n\r\n/**\r\n * Process VTON request with person and garment images\r\n * @param {Object} request - The VTON request containing person and garment images\r\n * @returns {Promise<Object>} - The VTON response with the generated image\r\n */\r\nexport const processVTON = async (request) => {\r\n  try {\r\n    console.log('Processing VTON request...');\r\n    \r\n    // Convert images to base64\r\n    const personImageBase64 = await fileToBase64(request.personImage);\r\n    const garmentImageBase64 = await fileToBase64(request.garmentImage);\r\n    \r\n    // In a real implementation, we would send these to the Hugging Face API\r\n    // For now, we'll simulate the API call with a delay\r\n    console.log('Simulating API call to Hugging Face...');\r\n    \r\n    // Simulate API processing delay\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    // For testing purposes, we'll return a predefined image\r\n    // In a real implementation, this would be the image returned by the API\r\n    const resultImage = '/assets1/man.png';\r\n    \r\n    console.log('VTON processing completed successfully');\r\n    \r\n    return {\r\n      success: true,\r\n      result_image: resultImage,\r\n      message: 'VTON processing completed successfully'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in VTON processing:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Unknown error occurred during VTON processing'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get the result image URL\r\n * @param {string} filename - The filename of the result image\r\n * @returns {string} - The URL of the result image\r\n */\r\nexport const getResultImage = (filename) => {\r\n  return `/assets1/${filename}`;\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAIC,IAAI,IAAK;EAC7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,aAAa,CAACN,IAAI,CAAC;IAC1BI,MAAM,CAACG,MAAM,GAAG,MAAML,OAAO,CAACE,MAAM,CAACI,MAAM,CAAC;IAC5CJ,MAAM,CAACK,OAAO,GAAIC,KAAK,IAAKP,MAAM,CAACO,KAAK,CAAC;EAC3C,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC5C,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACA,MAAMC,iBAAiB,GAAG,MAAMhB,YAAY,CAACa,OAAO,CAACI,WAAW,CAAC;IACjE,MAAMC,kBAAkB,GAAG,MAAMlB,YAAY,CAACa,OAAO,CAACM,YAAY,CAAC;;IAEnE;IACA;IACAL,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;;IAErD;IACA,MAAM,IAAIb,OAAO,CAACC,OAAO,IAAIiB,UAAU,CAACjB,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA;IACA,MAAMkB,WAAW,GAAG,kBAAkB;IAEtCP,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IAErD,OAAO;MACLO,OAAO,EAAE,IAAI;MACbC,YAAY,EAAEF,WAAW;MACzBG,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO;MACLW,OAAO,EAAE,KAAK;MACdX,KAAK,EAAEA,KAAK,CAACa,OAAO,IAAI;IAC1B,CAAC;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,QAAQ,IAAK;EAC1C,OAAO,YAAYA,QAAQ,EAAE;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}